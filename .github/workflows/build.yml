name: Build

on:
  pull_request:
  push:
    branches:
      - '**'          # every branch
      - '!nobuild-**' # unless marked as nobuild
    tags:
      - '**'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - archive: windows-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc

          - archive: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu

    name: Build (${{ matrix.archive }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Pre-build
        id: prebuild
        if: ${{ github.event_name == 'pull_request' }}
        shell: bash
        run: |
          event_name="${{ github.event_name }}"
          version="unknown"

          if [ $event_name = "pull_request" ]; then
            echo "Pull request detected"
            version="PR${{ github.event.number }}-${{ github.event.pull_request.head.sha }}"
          elif [ $event_name = "push" ]; then
            if [ "${{ github.ref_type }}" = "branch" ]; then
              echo "Branch push detected"
              echo "DXM_BUILD=nightly" >> $GITHUB_ENV
              version="${{ github.event.after }}"
            else
              echo "Tag push detected"
              echo "DXM_BUILD=release" >> $GITHUB_ENV
              version="${{ github.ref_name }}"
            fi
          fi

          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build
        shell: bash
        run: |
          cargo build --verbose --locked --release

      - name: Archive
        id: archive
        shell: bash
        run: |
          archive="dxm-${{ steps.prebuild.outputs.version }}-${{ matrix.archive }}"
          cd target/release

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            archive="$archive.zip"
            zip "../../$archive" "dxm.exe"
          else
            archive="$archive.tar.bz2"
            tar jcvf "../../$archive" "dxm"
          fi

          cd ../..
          echo "archive=$archive" >> $GITHUB_OUTPUT

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.archive }}
          path: ./${{ steps.archive.outputs.archive }}
      
  nightly:
    name: Publish Nightly
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download archives
        uses: actions/download-artifact@v4
        with:
          path: ./archives

      - name: Publish release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: Nightly Release
          body: |
            The latest commit from `main`.

            > [!WARNING]
            > This release is not stable. Do not use in production.
          files: |
            ./archives/*

  draft:
    name: Draft Release
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' && github.ref_type == 'tag' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download archives
        uses: actions/download-artifact@v4
        with:
          path: ./archives

      - name: Draft release
        uses: /action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: |
            ./dxm-*
